/*global module:false*/
module.exports = function(grunt) {

  grunt.registerMultiTask("update-tests", "updates the index / and singleTestFiles for all test files", function() {
    var filepaths = grunt.file.expand(grunt.util._.pluck(this.files, 'src'));
    var _ = grunt.util._;
    
    // all files are relative to the grunt.js file
    grunt.log.writeln("found "+filepaths.length+" testfiles.");
    grunt.file.write(
      "tests/all.js",
      
      "/* This file was auto-generated by grunt update-tests-task on "+grunt.template.today("yyyy-mm-dd hh:mm")+" */\n"+
      "define(function () {\n"+
      "  return "+JSON.stringify(
        _.map(filepaths, function (path) { return '/'+path; }),
        undefined,
        2
      )+";\n"+
      "});\n"
    );
    
    var testCode = _.template(grunt.file.read('tests/TestTemplate.html'));
    
    // write SinlgeTests
    _.each(filepaths, function(path) {
      var htmlPath = path.replace(/^(.*?)\.js$/, "$1.html");
      var test = path.match(/^tests\/(.*?)Test\.js$/)[1];
      
      grunt.log.writeln("write single test ("+test+") File for "+path+" to "+htmlPath);
      
      grunt.file.write(htmlPath, testCode({
        testTitle: 'single test for: '+test.replace('/\/g', '.'),
        testName: test+"Test"
      }));
      
    });
    
    grunt.log.ok();
  });

grunt.registerMultiTask("find-non-AMD", "finds all files without a define() header for AMD", function () {
    var filepaths = grunt.file.expand(grunt.util._.pluck(this.files, 'src'));
    var _ = grunt.util._;

    grunt.log.writeln('Searching in '+filepaths.length+' files.');
    var error = false;

    _.each(filepaths, function(path) {
      var code = grunt.file.read(path);

      if (!code.match(/^\s*define\(/m) && !code.match(/("|')function("|')\s*\=\=\=?\s*typeof define&&define\.amd/)) {
        grunt.log.error('File '+path+' contains not an AMD define');
        error = true;
      }

    });

    if (error) {
      grunt.log.fail();
    } else {
      grunt.log.ok();
    }
});

};